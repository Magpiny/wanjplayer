name: Build and Test Media Player

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"

env:
  BUILD_TYPE: Release
  WXWIDGETS_VERSION: 3.2.6
  CMAKE_VERSION: 3.31.2

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [ubuntu, fedora, arch]
        include:
          - distro: ubuntu
            container: ubuntu:latest
          - distro: fedora
            container: fedora:latest
          - distro: arch
            container: archlinux:latest

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Install Git (Container)
        run: |
          if [ "${{ matrix.distro }}" = "ubuntu" ]; then
            apt-get update && apt-get install -y git
          elif [ "${{ matrix.distro }}" = "fedora" ]; then
            dnf install -y git
          elif [ "${{ matrix.distro }}" = "arch" ]; then
            pacman -Sy --noconfirm git
          fi

      - uses: actions/checkout@v4

      - name: Install Dependencies (Ubuntu)
        if: matrix.distro == 'ubuntu'
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            wget \
            g++-13 \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            libnotify-dev \
            libsecret-1-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: Install Dependencies (Fedora)
        if: matrix.distro == 'fedora'
        run: |
          dnf install -y \
            gcc-c++ \
            cmake \
            wget \
            tar \
            bzip2 \
            make \
            gtk3-devel \
            webkit2gtk4.1-devel \
            gstreamer1-devel \
            gstreamer1-plugins-base-devel \
            gstreamer1-plugins-bad-free-devel \
            libnotify-devel \
            libsecret-devel \
            libjpeg-turbo-devel \
            libpng-devel \
            libtiff-devel

      - name: Install Dependencies (Arch)
        if: matrix.distro == 'arch'
        run: |
          pacman -Sy --noconfirm \
            base-devel \
            cmake \
            wget \
            gtk3 \
            webkit2gtk-4.1 \
            gstreamer \
            gst-plugins-base \
            gst-plugins-bad \
            libnotify \
            libsecret \
            libjpeg-turbo \
            libpng \
            libtiff

      - name: Cache wxWidgets
        id: cache-wxwidgets
        uses: actions/cache@v4
        with:
          path: /usr/local
          key: ${{ matrix.distro }}-wxwidgets-${{ env.WXWIDGETS_VERSION }}

      - name: Build and Install wxWidgets
        if: steps.cache-wxwidgets.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WXWIDGETS_VERSION }}/wxWidgets-${{ env.WXWIDGETS_VERSION }}.tar.bz2
          tar xf wxWidgets-${{ env.WXWIDGETS_VERSION }}.tar.bz2
          cd wxWidgets-${{ env.WXWIDGETS_VERSION }}
          mkdir build-gtk
          cd build-gtk
          ../configure --prefix=/usr/local --with-gtk=3 --enable-unicode --disable-debug
          make -j$(nproc)
          make install
          ldconfig

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)

      - name: Test
        working-directory: build
        run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure

      - name: Package
        run: |
          cmake --build build --target package --config ${{ env.BUILD_TYPE }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: media-player-${{ matrix.distro }}
          path: |
            build/*.deb
            build/*.rpm
            build/*.tar.gz
          if-no-files-found: ignore

  build-appimage:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            wget \
            file \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            libnotify-dev \
            libsecret-1-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libfuse2

      - name: Cache wxWidgets
        id: cache-wxwidgets-appimage
        uses: actions/cache@v4
        with:
          path: /usr/local
          key: appimage-wxwidgets-${{ env.WXWIDGETS_VERSION }}

      - name: Build and Install wxWidgets
        if: steps.cache-wxwidgets-appimage.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WXWIDGETS_VERSION }}/wxWidgets-${{ env.WXWIDGETS_VERSION }}.tar.bz2
          tar xf wxWidgets-${{ env.WXWIDGETS_VERSION }}.tar.bz2
          cd wxWidgets-${{ env.WXWIDGETS_VERSION }}
          mkdir build-gtk
          cd build-gtk
          ../configure --prefix=/usr/local --with-gtk=3 --enable-unicode --disable-debug
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build Application
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build --config ${{ env.BUILD_TYPE }} -j$(nproc)
          DESTDIR=${{ github.workspace }}/AppDir cmake --install build

      - name: Download linuxdeploy and wxWidgets plugin
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Create AppImage
        run: |
          export VERSION=$(git describe --tags --always)
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --output appimage \
            --desktop-file=${{ github.workspace }}/AppDir/usr/share/applications/*.desktop \
            --icon-file=${{ github.workspace }}/AppDir/usr/share/icons/hicolor/256x256/apps/*.png

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: media-player-appimage
          path: "*.AppImage"
          if-no-files-found: warn

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.CMAKE_VERSION }}

      - name: Cache wxWidgets
        id: cache-wxwidgets-windows
        uses: actions/cache@v4
        with:
          path: C:/wxWidgets
          key: windows-wxwidgets-${{ env.WXWIDGETS_VERSION }}

      - name: Install wxWidgets
        if: steps.cache-wxwidgets-windows.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://github.com/wxWidgets/wxWidgets.git -b v${{ env.WXWIDGETS_VERSION }}
          cd wxWidgets
          mkdir build-windows
          cd build-windows
          cmake .. -G "Visual Studio 17 2022" -A x64 -DwxBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=C:/wxWidgets
          cmake --build . --config Release --target install

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DwxWidgets_ROOT_DIR=C:/wxWidgets

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

      - name: Package
        run: |
          cmake --build ${{github.workspace}}/build --target package --config ${{env.BUILD_TYPE}}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: media-player-windows
          path: |
            ${{github.workspace}}/build/*.exe
            ${{github.workspace}}/build/*.zip
            ${{github.workspace}}/build/*.msi
          if-no-files-found: ignore

  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.CMAKE_VERSION }}

      - name: Install wxWidgets
        run: |
          brew install wxwidgets

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

      - name: Package
        run: |
          cmake --build ${{github.workspace}}/build --target package --config ${{env.BUILD_TYPE}}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: media-player-macos
          path: |
            ${{github.workspace}}/build/*.dmg
            ${{github.workspace}}/build/*.zip
          if-no-files-found: ignore

  create-release:
    needs: [build-linux, build-appimage, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release Info
        run: |
          echo "Build Date: $(date)" > release-info.txt
          echo "Commit: ${{ github.sha }}" >> release-info.txt
          echo "Build artifacts available for all platforms" >> release-info.txt
