#!/bin/bash
# WanjPlayer - Cross-platform Media Player with Automatic Video Configuration
# Copyright (c) 2024 Wanjare Samuel
#
# This script automatically detects your display system and configures
# the optimal video backend for seamless playback on any Linux environment.

set -e

# Script metadata
SCRIPT_NAME="WanjPlayer"
VERSION="1.0.0"
AUTHOR="Wanjare Samuel"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_header() {
    echo -e "${PURPLE}════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}  $SCRIPT_NAME v$VERSION - Universal Media Player${NC}"
    echo -e "${WHITE}  by $AUTHOR${NC}"
    echo -e "${PURPLE}════════════════════════════════════════════════════════════${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect build directory
find_executable() {
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    # Try different possible locations
    if [ -f "$script_dir/build/WanjPlayer" ]; then
        echo "$script_dir/build/WanjPlayer"
    elif [ -f "$script_dir/WanjPlayer" ]; then
        echo "$script_dir/WanjPlayer"
    elif [ -f "$script_dir/bin/WanjPlayer" ]; then
        echo "$script_dir/bin/WanjPlayer"
    else
        return 1
    fi
}

# Function to build if needed
build_if_needed() {
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    if ! find_executable >/dev/null; then
        print_info "WanjPlayer executable not found, attempting to build..."

        if [ ! -f "$script_dir/CMakeLists.txt" ]; then
            print_error "No CMakeLists.txt found. Please ensure you're in the WanjPlayer source directory."
            exit 1
        fi

        # Create build directory if it doesn't exist
        mkdir -p "$script_dir/build"

        # Build the project
        print_info "Building WanjPlayer..."
        if (cd "$script_dir" && cmake -B build -S . >/dev/null 2>&1 && cmake --build build >/dev/null 2>&1); then
            print_status "Build completed successfully"
        else
            print_error "Build failed. Please check your development environment."
            print_info "Required: CMake 3.30.3+, wxWidgets 3.2.6+, GStreamer"
            exit 1
        fi
    fi
}

# Function to detect system environment
detect_environment() {
    SESSION_TYPE="${XDG_SESSION_TYPE:-unknown}"
    WAYLAND_DISPLAY="${WAYLAND_DISPLAY:-}"
    X11_DISPLAY="${DISPLAY:-}"

    print_info "Detecting display system environment..."

    if [ -n "$WAYLAND_DISPLAY" ] && [ "$SESSION_TYPE" = "wayland" ]; then
        DETECTED_SYSTEM="wayland"
        print_info "Session Type: Wayland (primary)"
    elif [ -n "$X11_DISPLAY" ] && [ "$SESSION_TYPE" = "x11" ]; then
        DETECTED_SYSTEM="x11"
        print_info "Session Type: X11 (native)"
    elif [ -n "$WAYLAND_DISPLAY" ] && [ -n "$X11_DISPLAY" ]; then
        DETECTED_SYSTEM="hybrid"
        print_info "Session Type: Hybrid (Wayland + XWayland available)"
    elif [ -n "$X11_DISPLAY" ]; then
        DETECTED_SYSTEM="x11_only"
        print_info "Session Type: X11 (fallback)"
    else
        DETECTED_SYSTEM="unknown"
        print_warning "Session Type: Unknown (using safe defaults)"
    fi
}

# Function to configure video backend
configure_video_backend() {
    print_info "Configuring optimal video backend..."

    case "$DETECTED_SYSTEM" in
        "wayland"|"hybrid")
            print_info "Applying Wayland compatibility configuration..."

            # Force X11 backend through XWayland for maximum compatibility
            export GDK_BACKEND=x11
            export QT_QPA_PLATFORM=xcb

            # Disable all OpenGL acceleration to prevent segfaults
            export GST_GL_DISABLED=1
            export LIBGL_ALWAYS_SOFTWARE=1
            export MESA_GL_VERSION_OVERRIDE=2.1

            # Configure GStreamer for stable video playback
            export GST_VIDEO_SINK=ximagesink
            export GST_PLUGIN_FEATURE_DISABLE="glimagesink,glsinkbin,gtkglsink,glcolorconvert,glupload,gldownload"
            export GST_DEBUG=0
            export GST_REGISTRY_FORK=no

            print_status "Wayland video compatibility mode enabled"
            print_status "Using X11 backend via XWayland"
            print_status "OpenGL acceleration disabled for stability"
            VIDEO_MODE="Wayland-safe"
            ;;

        "x11"|"x11_only")
            print_info "Applying X11 native configuration..."

            # Minimal safe settings for X11
            export GST_GL_DISABLED=1
            export GST_VIDEO_SINK=ximagesink
            export GST_DEBUG=0

            print_status "X11 native video backend configured"
            VIDEO_MODE="X11-native"
            ;;

        *)
            print_warning "Unknown environment detected, using conservative settings..."

            # Most conservative settings for unknown systems
            export GST_GL_DISABLED=1
            export LIBGL_ALWAYS_SOFTWARE=1
            export GST_VIDEO_SINK=ximagesink
            export GST_DEBUG=0

            print_status "Safe fallback configuration applied"
            VIDEO_MODE="Safe-fallback"
            ;;
    esac
}

# Function to check GStreamer plugins
check_gstreamer() {
    if ! command_exists gst-inspect-1.0; then
        print_warning "GStreamer tools not found in PATH"
        print_info "Video playback may be limited"
        return 1
    fi

    # Check for essential video sink
    if gst-inspect-1.0 ximagesink >/dev/null 2>&1; then
        print_status "GStreamer video sink available"
        return 0
    else
        print_warning "GStreamer video sink may not be available"
        print_info "Install gst-plugins-base and gst-plugins-good for video support"
        return 1
    fi
}

# Function to show system info
show_system_info() {
    echo
    print_info "System Information:"
    echo "  • Display System: $DETECTED_SYSTEM"
    echo "  • Video Mode: $VIDEO_MODE"
    echo "  • Wayland: $([ -n "$WAYLAND_DISPLAY" ] && echo "Available" || echo "Not available")"
    echo "  • X11: $([ -n "$X11_DISPLAY" ] && echo "Available" || echo "Not available")"
    echo "  • GStreamer: $(command_exists gst-inspect-1.0 && echo "Available" || echo "Not found")"
}

# Function to show usage information
show_usage() {
    echo "Usage: $0 [OPTIONS] [FILES...]"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -v, --version  Show version information"
    echo "  --info         Show system information and exit"
    echo "  --build        Force rebuild of WanjPlayer"
    echo "  --debug        Run with debug output"
    echo "  --safe         Run with maximum safety settings"
    echo
    echo "Examples:"
    echo "  $0                    # Start WanjPlayer"
    echo "  $0 music.mp3         # Start with a file"
    echo "  $0 *.mp4             # Start with multiple files"
    echo "  $0 --debug           # Start with debug logging"
    echo
    echo "Files can be audio or video formats supported by GStreamer:"
    echo "  Audio: MP3, WAV, FLAC, OGG, AAC, M4A"
    echo "  Video: MP4, MKV, AVI, MOV, WEBM"
}

# Function to show version
show_version() {
    echo "$SCRIPT_NAME $VERSION"
    echo "Copyright (c) 2024 $AUTHOR"
    echo "A cross-platform media player built with wxWidgets and GStreamer"
}

# Main execution function
main() {
    local files_to_open=()
    local debug_mode=false
    local safe_mode=false
    local force_build=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            --info)
                print_header
                detect_environment
                configure_video_backend
                check_gstreamer
                show_system_info
                exit 0
                ;;
            --build)
                force_build=true
                shift
                ;;
            --debug)
                debug_mode=true
                shift
                ;;
            --safe)
                safe_mode=true
                shift
                ;;
            --*)
                print_error "Unknown option: $1"
                print_info "Use --help for usage information"
                exit 1
                ;;
            *)
                files_to_open+=("$1")
                shift
                ;;
        esac
    done

    # Show header
    print_header
    echo

    # Force build if requested
    if [ "$force_build" = true ]; then
        print_info "Forcing rebuild..."
        rm -f "$(dirname "${BASH_SOURCE[0]}")/build/WanjPlayer" 2>/dev/null || true
    fi

    # Build if needed
    build_if_needed

    # Find executable
    WANJPLAYER_EXEC=$(find_executable)
    if [ -z "$WANJPLAYER_EXEC" ]; then
        print_error "WanjPlayer executable not found after build attempt"
        exit 1
    fi

    print_status "WanjPlayer executable found: $(basename "$WANJPLAYER_EXEC")"

    # Detect environment
    detect_environment

    # Configure video backend
    configure_video_backend

    # Check GStreamer
    check_gstreamer

    # Apply additional settings based on flags
    if [ "$debug_mode" = true ]; then
        export GST_DEBUG=3
        print_status "Debug mode enabled"
    fi

    if [ "$safe_mode" = true ]; then
        export LIBGL_ALWAYS_SOFTWARE=1
        export GST_GL_DISABLED=1
        print_status "Maximum safety mode enabled"
    fi

    # Show system info
    show_system_info

    echo
    print_info "Starting WanjPlayer..."

    if [ ${#files_to_open[@]} -gt 0 ]; then
        print_info "Files to open: ${#files_to_open[@]}"
    fi

    print_info "Press Ctrl+C to exit"
    print_info "Use F9 to toggle playlist for fullscreen video"
    echo

    # Launch WanjPlayer
    if [ ${#files_to_open[@]} -gt 0 ]; then
        # Note: WanjPlayer doesn't currently support command-line file arguments
        # This is prepared for future enhancement
        print_info "Note: Please use File → Open Files to load media after startup"
    fi

    # Execute WanjPlayer
    exec "$WANJPLAYER_EXEC"
}

# Cleanup function for graceful exit
cleanup() {
    echo
    print_info "WanjPlayer session ended"
    exit 0
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Run main function with all arguments
main "$@"
